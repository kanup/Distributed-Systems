# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pubsub_pb2 as pubsub__pb2


class RegistryServerServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterServer = channel.unary_unary(
                '/RegistryServerServices/RegisterServer',
                request_serializer=pubsub__pb2.RegistrServerRequest.SerializeToString,
                response_deserializer=pubsub__pb2.RegisterServerResponse.FromString,
                )
        self.GetServerList = channel.unary_unary(
                '/RegistryServerServices/GetServerList',
                request_serializer=pubsub__pb2.GetServerListRequest.SerializeToString,
                response_deserializer=pubsub__pb2.ServerListResponse.FromString,
                )


class RegistryServerServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServerServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterServer,
                    request_deserializer=pubsub__pb2.RegistrServerRequest.FromString,
                    response_serializer=pubsub__pb2.RegisterServerResponse.SerializeToString,
            ),
            'GetServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerList,
                    request_deserializer=pubsub__pb2.GetServerListRequest.FromString,
                    response_serializer=pubsub__pb2.ServerListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RegistryServerServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegistryServerServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryServerServices/RegisterServer',
            pubsub__pb2.RegistrServerRequest.SerializeToString,
            pubsub__pb2.RegisterServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryServerServices/GetServerList',
            pubsub__pb2.GetServerListRequest.SerializeToString,
            pubsub__pb2.ServerListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ClientServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class ClientServicesServicer(object):
    """Missing associated documentation comment in .proto file."""


def add_ClientServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClientServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientServices(object):
    """Missing associated documentation comment in .proto file."""


class ServerServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinServer = channel.unary_unary(
                '/ServerServices/JoinServer',
                request_serializer=pubsub__pb2.JoinServerRequest.SerializeToString,
                response_deserializer=pubsub__pb2.JoinServerResponse.FromString,
                )
        self.PublishArticle = channel.unary_unary(
                '/ServerServices/PublishArticle',
                request_serializer=pubsub__pb2.PublishArticleRequest.SerializeToString,
                response_deserializer=pubsub__pb2.PublishArticleResponse.FromString,
                )
        self.GetArticles = channel.unary_unary(
                '/ServerServices/GetArticles',
                request_serializer=pubsub__pb2.GetArticlesRequest.SerializeToString,
                response_deserializer=pubsub__pb2.GetArticlesResponse.FromString,
                )
        self.LeaveServer = channel.unary_unary(
                '/ServerServices/LeaveServer',
                request_serializer=pubsub__pb2.LeaveServerRequest.SerializeToString,
                response_deserializer=pubsub__pb2.LeaveServerResponse.FromString,
                )


class ServerServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JoinServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinServer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinServer,
                    request_deserializer=pubsub__pb2.JoinServerRequest.FromString,
                    response_serializer=pubsub__pb2.JoinServerResponse.SerializeToString,
            ),
            'PublishArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishArticle,
                    request_deserializer=pubsub__pb2.PublishArticleRequest.FromString,
                    response_serializer=pubsub__pb2.PublishArticleResponse.SerializeToString,
            ),
            'GetArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArticles,
                    request_deserializer=pubsub__pb2.GetArticlesRequest.FromString,
                    response_serializer=pubsub__pb2.GetArticlesResponse.SerializeToString,
            ),
            'LeaveServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveServer,
                    request_deserializer=pubsub__pb2.LeaveServerRequest.FromString,
                    response_serializer=pubsub__pb2.LeaveServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServerServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JoinServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerServices/JoinServer',
            pubsub__pb2.JoinServerRequest.SerializeToString,
            pubsub__pb2.JoinServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerServices/PublishArticle',
            pubsub__pb2.PublishArticleRequest.SerializeToString,
            pubsub__pb2.PublishArticleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerServices/GetArticles',
            pubsub__pb2.GetArticlesRequest.SerializeToString,
            pubsub__pb2.GetArticlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerServices/LeaveServer',
            pubsub__pb2.LeaveServerRequest.SerializeToString,
            pubsub__pb2.LeaveServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
